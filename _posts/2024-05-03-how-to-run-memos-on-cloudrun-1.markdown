---
layout: post
title:  "【分報に最適な】memosをCloud Runに上げたい"
date:   2024-05-03 18:59:25 +0900
categories: blog
published: true
---

# 結論

- インスタンス&データベースを配置するリージョンを決定
  - us-west1(オレゴン)とかおすすめ
  - 東京とかはSQL鯖のランニングコストが高かったりする
- 以下を設定する
  - VPCネットワークの「プライベートサービスアクセス」設定をする
    - 「サービスに割り当てられたIP空間」タブで、Cloud SQL専用のネットワークを **/16空間で** 定義
    - 「サービスへのプライベート接続」タブで、「サービスプロデューサー:Google Cloud Platform」とした接続を作成
  - Cloud SQLを建てる
    - 一番小さいリソースにする
    - プライベートIPを先に設定したVPC内で割り当てるように
    - memos用のデータベースとユーザも作っておく(組み込み認証とする)
  - Cloud Runコンテナ用のサービスアカウントを作成する
    - 付与ロール
      - `roles/cloudsql.instanceUser`
      - `roles/cloudsql.client` (<-ほんとうは多分要らない)
      - `roles/secretmanager.secretAccessor`
  - DBへの接続情報をSecret managerに登録する
    - MySQL: `<username>:<password>@tcp(<SQL server's private ip>)/<database name>`
    - 他: 各自ドキュメントを見ながら。
    - 登録したシークレット(DSN)の詳細画面から、当該シークレットに`roles/secretmanager.secretAccessor`を付与
  - Cloud Runコンテナを建てる
    - コンテナURL欄にDocker Hubの`<username>/<repository>:<version>`を入力
    - リージョンはCloud SQLと同一にする
    - メモリは128MiBでよい、CPUは1にして代わりに複数セッションを許容するように。
    - コンテナのポート番号: `5230`
    - 環境変数設定
      - `MEMOS_DRIVER=mysql`
      - `MEMOS_DSN=<登録したシークレット>`
    - 「ネットワーク」タブからアウトバウンド接続(直接)を設定。ネットワークはプライベートサービスアクセスを設定したネットワークにする
    - 「セキュリティ」タブで、作っておいたサービスアカウントを設定。
- Tips
  - `memos:v0.21.0` では、内包するAPIについてv1とv2が共存しており、v2は `5231` 番ポートで露出する仕様である。Cloud Runでは1つのポートしか露出できないため、APIのv2のみ利用することが出来ない。

# memosとは

[![usememos/memos](../../../../img/memos_demoimg.png)](https://github.com/usememos/memos)

青くて飛ぶやつの某SNSライクに使えるメモツール。  
操作感が **【もろソレ】** なので、なにかをメモりたいときに「メモツール立ち上げるのめんどいな」となりにくい。  
ハッシュタグでタグ付けが可能で、特に学会・研修から日々の開発中のナレッジまで、KibelaやEsa、Yammerなど(すなわちブログライクなもの)に上げにくい「登壇者の何気ない一言」や「利用中のツール名」をメモるのに最適。  
「メモツール」であるから、某SNSみたいに一々 "`from:<my_id> https://`" とかする必要すらない。ヒットしないとかもない。  
複数人で使いたいなら、Timelineタブを選ぶことで他人の公開・限定公開投稿も確認可能。これでOSSなのは非常に頭が上がらない。  
  
**開発中のtipsメモ帳が、そのまんま分報にもなるのいいよね。そういうツール。**  
  
但し、スタンドアロンじゃなくてWebサーバとして動作するので、基本VPSや自前鯖、PaaSなどにブチ上げる必要がある。  

# 手っ取り早く動かす方法

tailscale x Raspberry Piでおｋ。何気に一番安いと思う(Raspberry Piのランニングコストが1,500円/月未満なら)  
  
但し、そうでない場合やSLAを気にしたい場合はクラウドに上げてしまうのもいいだろう。

# on GCPという選択肢

memos自体が超単純なプログラムの為、GCPのCloud RunとCloud SQLをVPCで繋げるだけでOK。  

## 料金体系

本当は詳細にまとめるべきだが、(執筆を後に回した結果)書く気力が消えてしまったのでざっくりと。

- Cloud Runは、常時コンテナを回すとかでない限り、コンテナ1つ程度では無料枠を超えない。
- Cloud SQLは、注意が必要である。
  - ランニングコストは、大体GCEインスタンスをフルで回すときと同等のコストになる。また無料枠がなく個人目線では非常に割高なため、節約したいのであれば割り当てリソースを最低限にしたうえでこまめに落としておくとよい。
  - `us-west1` で1ヶ月無休で回すと約10ドル(現在の相場で1,500円)。

# やり方

## 0. Googleアカウントの作成～プロジェクトの作成

GCPを使う準備を諸々済ませておく。支払いプロファイルの設定も忘れずに。  

## 1. お試ししてみる

とりあえず **「データの保存先とか考えず」** 軽くコンテナを建ててみよう。  
[Cloud Runの管理ページ](https://console.cloud.google.com/run)へ行き、【サービスを作成】してみる。  
※ 随時【APIの有効化】が必要になる。  

- コンテナURL: **`neosmemo/memos:stable`**
- リージョン: **任意** (大阪や東京でOK)
- 認証: **未認証の呼び出しを許可**
- コンテナの編集
  - ポート: **`5230`**
  - メモリ: **128MiB**
- インスタンスの最大数: 10とか

これで適当に建てて、表示されるURLへ飛ぶと何食わぬ顔でmemosを拝める。最高すぎ  
**気が済んだら、Cloud Runの管理ページからサービスを削除すること。**

## 2. 実際に建ててみる

先ほど建てた鯖はデータの保存先を指定していない。この場合、各コンテナ内のローカルストレージが保存先になる。  
その為、アクセスが来なくてコンテナが破棄されるとデータが飛ぶし、逆に多くのアクセスが発生した場合はコンテナが複数建ってしまう。  
これを防止するため、Cloud SQLでSQLサーバを建ててそこを参照するようインスタンスを建て直す。  

### step-0. お試しで建てたサービスの削除

忘れないでね！！！  

### step-1. SQLを準備する
  
[Cloud SQLの管理ページ](https://console.cloud.google.com/sql/instances)へ行き、【インスタンスを作成】する。  
このとき、MySQL、PostgreSQL、SQL Serverを選ぶことができるが、**SQL Serverは本記事執筆時点で対応していないので除外**。  
MySQLとPostgreSQLはどっちでもいいですが、私はMySQLを採用。  

- パスワード: 自動生成
- エディション: **Enterprise** / **サンドボックス**
- リージョン: **us-west1 (オレゴン)** (<- 日本から一番近いらしいので)
- ゾーンの可用性: シングルゾーン
- インスタンスのカスタマイズ
  - マシンの構成
    - マシンシェイプ: **共有コア, 一番小さいやつ**
  - ストレージ: **HDD 10GB 自動増量を有効にする**
  - 接続: **\>\>\>\>\> ！いまからやる！ \<\<\<\<\<**
  - バックアップ: 
    - 日次バックアップの自動化: お好みで。時間帯を3\:00-7\:00に変更した
    - ポイントインタイムリカバリ: お好みで。私はこの項目だけ外しました

ここで、SQLサーバとCloud Runコンテナをつなぐ方法は「パブリックPで接続」する場合と「プライベートIPで接続」する場合に分かれる。  
しかしながら、自分のメモ帳のデータをパブリックで置く ~~露出狂~~ **紳士** はいないと思うので、**ここから別のタブでプライベートIPの設定をする。**  

### step-2. VPCネットワークの構成

というわけで、一旦SQLインスタンスの作成はおいておいて、新しいタブでVPC管理ページへ行く。

- VPC一覧から `default` を選択
- **プライベート サービス接続** > **サービスに割り当てられたIP範囲** を選択
- **IP 範囲の割り当て** をクリックし、IP空間をつくる。
  - 名前: default-ip-range
  - IP 範囲: **自動** 
  - プレフィックスの長さ: **16** (<-必ず/24より大きい空間を指定すること)
- サービスへのプライベート接続 タブに移動し、接続を作成する。
  - 割り当て: default-ip-range

> Tips: プライベートサービスアクセスのIP空間を /16 にする理由  
> Cloud SQLがプライベートサービスアクセス内のIP空間に割り当てられると、Cloud SQL自体がIP空間内にリージョンごとで/24の空間を定義してしまう。そのため、/24より大きな空間を定義しなければIP空間が不足して死ぬ

### step-3. SQLの準備を完了する

VPCが準備できたので、接続セクションに以下の設定を入れてデプロイする。

- 接続
  - ネットワーク: **default**
  - **「割り当てられたIP範囲のオプションを表示」をクリック**
  - 割り振られている IP 範囲: **default-ip-range**
  - Google Cloud サービスの承認: **チェックを入れる**
- 他設定は前のセクションを参照

デプロイ完了まで最低15分は掛かるので、ゆっくり紅茶を啜りながら待つべし。  
デプロイが完了したら、「データベース」タブからmemos用のデータベースを建てる。  

- データベース名: memos_app

その後、「ユーザ」タブからmemosが用いるアカウント情報を準備する。  

- 組み込み認証を選択
  - ユーザ名: \<任意のユーザ名\>

最後に、「概要」タブを開いて「プライベートIPアドレス」をメモっておく。

### step-4. SQLとCloud Runの連携に必要なあれこれを準備する

#### step-4-1. シークレットの作成

準備したDBをmemosに使ってもらうには、勿論ユーザ名やパスワード等の認証情報をCloud Runへ設定する必要がある。  
しかし、これらの情報は機密性が高く生データで扱うのは危険なため、Secret Managerに預けてしまおう。  
  
画面上部の検索ボックスに"Secret manager"と入力し、Secret manager管理ページへ行きます。【シークレットの追加】から、データベースへの接続情報(データベースのDSN)を適当な名前で保存します。  

- 名前: **memos-db1-dsn**
- リソースの値: **\<username\>:\<password\>@tcp(\<SQL server\'s private ip\>)/memos_app**

#### step-4-2. サービスアカウントの作成

次に、「今保存したシークレットをCloud Runが読めるように」、ついでに「そもそもCloud RunがCloud SQLへアクセスできるように」します。  
これらのリソースを読むために、サービスアカウントを作りましょう。  
サービスアカウントとは、Cloud RunやGCE、Cloud FunctionなどがDBやシークレットにアクセスするために使う認証情報です。[詳しくはGCPの公式ドキュメントを見てください](https://cloud.google.com/iam/docs/service-account-overview)。  

サービスアカウントの管理ページへ行き、【サービスアカウントを作成】します。  

- サービスアカウントの詳細
  - 名前: memos-container
- このサービスアカウントにプロジェクトへのアクセスを許可する
  - 以下ロールを追加: 
    - roles/cloudsql.instanceUser
    - roles/secretmanager.secretAccessor
- ユーザーにこのサービス アカウントへのアクセスを許可
  - なし

#### step-4-3. Secret manager側で権限を設定

作成したサービスアカウント(を用いたVMやコンテナなど)が、データベースのDSNを見れるようにします。  
先ほど作成したSecret managerのシークレット詳細画面に戻り、「権限」タブから作成したサービスアカウントに【アクセス権を付与】します。

- プリンシパルの追加: サービスアカウントのアドレス(メールアドレスっぽいもの)
- ロールを割り当てる: Secret managerのシークレットアクセサー

### step-5. Cloud Runサービスを立てる

いよいよCloud Runの管理ページに戻り、memosのコンテナをデプロイします。  

- コンテナURL: **`neosmemo/memos:stable`**
- リージョン: **Cloud SQLと同一のリージョン**
- 認証: **未認証の呼び出しを許可**
- 「コンテナ」タブ
  - コンテナの編集
    - 設定
      - ポート: **`5230`**
      - メモリ: **128MiB**
    - 変数とシークレット
      - 環境変数として以下を追加
        - MEMOS_DRIVER=mysql
      - シークレットとして以下を追加
        - 環境変数1
          - 名前1: MEMOS_DSN
          - シークレット: memos-db1-dsn
          - バージョン1: latest
  - インスタンスの最大数: 10とか
- 「ネットワーク」タブ
  - アウトバウンドトラフィック用のVPCに接続する: **チェックを入れる**
    - VPCに直接トラフィックを送信する
      - ネットワーク: default
      - サブネット: default
- 「セキュリティ」タブ
  - サービスアカウント: **先に作ったサービスアカウント**

### final. 最後に、Cloud Runに割り当てられたURLへアクセスしてSignUpしたら完成！

---

# Tips

- コンテナを「リクエスト処理中のみCPUを割り当てる」にしている場合、コールドスタートするときがある。このとき、最初にページを開くときに大体5sec程度掛かるときがある。そこまで使用に支障はない。
- スマホ等でmemosへ接続するとき、wifiからLTEへネットワークが変わったりすると、Cloud Runが別のホストからのアクセスと勘違いしてコンテナが複数建つときがある。古いコンテナはすぐIdleになって消えるのであまり気にする必要はないが、メモリの割り当てを下げるなどしておくと、無料枠が長持ちすると思われる。
- 先に書いた通り、APIのv2のみ使用不可。
- Githubのmainブランチは頻繁に内容が変わるので、GithubサイトでソースコードやAPI仕様を確認したいときはリリースタグやブランチを選択するのを忘れずに。